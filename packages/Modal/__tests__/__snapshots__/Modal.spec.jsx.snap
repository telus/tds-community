// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Modal renders 1`] = `
.c5 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c6 > *:not(:last-child) {
  margin-bottom: 1rem;
}

.c10 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c12 {
  border-width: 0;
  border-radius: 4px;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
  height: 3.25rem;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  margin: 0;
  padding: 0 2rem;
  cursor: pointer;
  background: none;
  -webkit-transition: background 0.2s;
  transition: background 0.2s;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  background-color: #2B8000;
  color: #fff;
}

.c12:hover {
  box-shadow: 0 0 0 1px;
  background-color: #fff;
  color: #2B8000;
}

.c13 {
  width: 100%;
}

.c8 {
  color: #2a2c2e;
  word-wrap: break-word;
  padding: 0;
  margin: 0;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  text-align: left;
}

.c8 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c3 {
  position: relative;
  top: 0;
  width: 24px;
  height: 24px;
  fill: #2a2c2e;
}

.c7 {
  word-wrap: break-word;
  color: #2a2c2e;
  font-weight: 700;
  font-size: 1.25rem;
  line-height: 1.4;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
}

.c7 sup {
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
  font-size: 0.875rem;
  top: -0.5em;
}

.c7 > span {
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
}

.c0 {
  overflow: scroll;
  background-color: #fff;
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1400;
}

.c1 {
  height: 100%;
  width: 100%;
  position: relative;
  top: 0%;
  left: 0%;
}

.c1 > button:first-child {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-self: flex-end;
  -ms-flex-item-align: end;
  align-self: flex-end;
  background: none;
  border: none;
  margin: 1rem 0.5rem;
}

.c9 > div:first-child {
  padding-bottom: 0rem;
}

.c2 {
  float: right;
  padding: 1rem 1rem 0 0;
  position: absolute;
  right: 0%;
  top: 0%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  overflow: scroll;
  height: 100%;
}

.c4 > div:first-child {
  height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

@media (max-width:767px) {
  .c5 {
    padding-top: 2rem;
    padding-bottom: 2rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

@media (min-width:768px) {
  .c5 {
    padding-top: 3rem;
    padding-bottom: 3rem;
    padding-left: 3rem;
    padding-right: 3rem;
  }
}

@media (max-width:767px) {
  .c10 {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
}

@media (min-width:768px) {
  .c10 {
    padding-top: 3rem;
    padding-bottom: 3rem;
  }
}

@media (min-width:768px) {
  .c12 {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
    width: auto;
    min-width: 180px;
  }
}

@media (min-width:768px) {
  .c0 {
    background-color: rgba(255,255,255,0.94);
  }
}

@media (min-width:768px) {
  .c1 {
    margin: 0 auto;
    max-width: 570px;
    height: auto;
    border-radius: 0.25rem;
    box-shadow: 0 0 16px 0 rgba(0,0,0,0.2);
    z-index: 2000;
    background-color: #fff;
    top: 29%;
  }
}

@media (min-width:768px) {
  .c11 {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-flow: row;
    -ms-flex-flow: row;
    flex-flow: row;
  }

  .c11 > button:first-child {
    margin-right: 1rem;
  }
}

<Modal
  bodyText="Are you sure?"
  cancelCTAText=""
  closeModalHandler={[Function]}
  confirmCTAText="I am sure"
  focusElementAfterClose={
    Object {
      "current": null,
    }
  }
  heading="A heading"
  modalOpen={true}
  proceedModalHandler={[Function]}
>
  <styles__FullScreenOverlay
    data-testid="tds-modal-overlay"
    modalOpen={true}
  >
    <StyledComponent
      data-testid="tds-modal-overlay"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__FullScreenOverlay-sc-13jcun6-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "styles__FullScreenOverlay",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__FullScreenOverlay-sc-13jcun6-0",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={
        Object {
          "current": .c5 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c6 > *:not(:last-child) {
  margin-bottom: 1rem;
}

.c10 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c12 {
  border-width: 0;
  border-radius: 4px;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
  height: 3.25rem;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  margin: 0;
  padding: 0 2rem;
  cursor: pointer;
  background: none;
  -webkit-transition: background 0.2s;
  transition: background 0.2s;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  background-color: #2B8000;
  color: #fff;
}

.c12:hover {
  box-shadow: 0 0 0 1px;
  background-color: #fff;
  color: #2B8000;
}

.c13 {
  width: 100%;
}

.c8 {
  color: #2a2c2e;
  word-wrap: break-word;
  padding: 0;
  margin: 0;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  text-align: left;
}

.c8 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c3 {
  position: relative;
  top: 0;
  width: 24px;
  height: 24px;
  fill: #2a2c2e;
}

.c7 {
  word-wrap: break-word;
  color: #2a2c2e;
  font-weight: 700;
  font-size: 1.25rem;
  line-height: 1.4;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
}

.c7 sup {
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
  font-size: 0.875rem;
  top: -0.5em;
}

.c7 > span {
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
}

.c0 {
  overflow: scroll;
  background-color: #fff;
  width: 100%;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1400;
}

.c1 {
  height: 100%;
  width: 100%;
  position: relative;
  top: 0%;
  left: 0%;
}

.c1 > button:first-child {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-self: flex-end;
  -ms-flex-item-align: end;
  align-self: flex-end;
  background: none;
  border: none;
  margin: 1rem 0.5rem;
}

.c9 > div:first-child {
  padding-bottom: 0rem;
}

.c2 {
  float: right;
  padding: 1rem 1rem 0 0;
  position: absolute;
  right: 0%;
  top: 0%;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  overflow: scroll;
  height: 100%;
}

.c4 > div:first-child {
  height: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: column;
  -ms-flex-flow: column;
  flex-flow: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

@media (max-width:767px) {
  .c5 {
    padding-top: 2rem;
    padding-bottom: 2rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

@media (min-width:768px) {
  .c5 {
    padding-top: 3rem;
    padding-bottom: 3rem;
    padding-left: 3rem;
    padding-right: 3rem;
  }
}

@media (max-width:767px) {
  .c10 {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
}

@media (min-width:768px) {
  .c10 {
    padding-top: 3rem;
    padding-bottom: 3rem;
  }
}

@media (min-width:768px) {
  .c12 {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
    width: auto;
    min-width: 180px;
  }
}

@media (min-width:768px) {
  .c0 {
    background-color: rgba(255,255,255,0.94);
  }
}

@media (min-width:768px) {
  .c1 {
    margin: 0 auto;
    max-width: 570px;
    height: auto;
    border-radius: 0.25rem;
    box-shadow: 0 0 16px 0 rgba(0,0,0,0.2);
    z-index: 2000;
    background-color: #fff;
    top: 29%;
  }
}

@media (min-width:768px) {
  .c11 {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-flow: row;
    -ms-flex-flow: row;
    flex-flow: row;
  }

  .c11 > button:first-child {
    margin-right: 1rem;
  }
}

<div
            class="c0"
            data-testid="tds-modal-overlay"
          >
            <div
              class="c1"
            >
              <div
                class="c2"
              >
                <svg
                  aria-hidden="true"
                  class="c3"
                  color="greyShark"
                  data-testid="dependentSvg"
                  focusable="false"
                  height="24"
                  viewBox="0 0 24 24"
                  width="24"
                >
                  <path
                    d="M12 12.707l-4.147 4.146a.498.498 0 0 1-.707 0 .5.5 0 0 1 0-.707L11.293 12 7.146 7.853a.5.5 0 0 1 .707-.707L12 11.293l4.146-4.147a.5.5 0 0 1 .707.707L12.707 12l4.146 4.146a.5.5 0 0 1-.707.707L12 12.707zM12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22.957C5.958 1.043 1.043 5.958 1.043 12c0 6.042 4.915 10.957 10.957 10.957 6.042 0 10.957-4.915 10.957-10.957 0-6.042-4.915-10.957-10.957-10.957z"
                    fill-rule="nonzero"
                  />
                </svg>
              </div>
              <div
                class="c4"
              >
                <div
                  class="c5"
                >
                  <div
                    class="c6"
                  >
                    <div
                      tabindex="-1"
                    >
                      <div
                        class="c7"
                        data-testid="heading"
                      >
                        A heading
                      </div>
                    </div>
                    <p
                      class="c8"
                    >
                      Are you sure?
                    </p>
                  </div>
                  <div
                    class="c9"
                  >
                    <div
                      class="c10"
                    >
                      <div
                        class="c11"
                      >
                        <button
                          class="c12"
                          type="button"
                        >
                          <span
                            class="c13"
                          >
                            I am sure
                          </span>
                        </button>
                        
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>,
        }
      }
      modalOpen={true}
    >
      <div
        className="c0"
        data-testid="tds-modal-overlay"
      >
        <styles__StyledModal
          cancelCTAExists=""
        >
          <StyledComponent
            cancelCTAExists=""
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__StyledModal-sc-13jcun6-1",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "height: 100%;",
                    "width: 100%;",
                    "position: relative;",
                    "top: 0%;",
                    "left: 0%;",
                    "> button:first-child {",
                    "display: flex;",
                    "align-self: flex-end;",
                    "background: none;",
                    "border: none;",
                    "margin: 1rem 0.5rem;",
                    "}",
                    "@media (min-width: 768px) {",
                    "margin: 0 auto;",
                    "max-width: 570px;",
                    "height: auto;",
                    "border-radius: 0.25rem;",
                    "box-shadow: 0 0 16px 0 rgba(0,0,0,0.2);",
                    "z-index: 2000;",
                    "background-color: #fff;",
                    "top: 29%;",
                    "}",
                  ],
                },
                "displayName": "styles__StyledModal",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__StyledModal-sc-13jcun6-1",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <styles__CloseButtonWrapper>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__CloseButtonWrapper-sc-13jcun6-5",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          "float: right;",
                          "padding: 1rem 1rem 0 0;",
                          "position: absolute;",
                          "right: 0%;",
                          "top: 0%;",
                        ],
                      },
                      "displayName": "styles__CloseButtonWrapper",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__CloseButtonWrapper-sc-13jcun6-5",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c2"
                  >
                    <Dependent
                      a11yText="Close"
                      onClick={[Function]}
                    >
                      <Dependent
                        a11yText="Close"
                        color="greyShark"
                        onClick={[Function]}
                      >
                        <styled.svg
                          a11yText="Close"
                          color="greyShark"
                          data-testid="dependentSvg"
                          height="24"
                          onClick={[Function]}
                          viewBox="0 0 24 24"
                          width="24"
                        >
                          <StyledComponent
                            a11yText="Close"
                            color="greyShark"
                            data-testid="dependentSvg"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "aria-hidden": true,
                                    "focusable": false,
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": false,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    [Function],
                                    [Function],
                                    [Function],
                                  ],
                                },
                                "displayName": "styled.svg",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "svg",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            height="24"
                            onClick={[Function]}
                            viewBox="0 0 24 24"
                            width="24"
                          >
                            <svg
                              aria-hidden={true}
                              className="c3"
                              color="greyShark"
                              data-testid="dependentSvg"
                              focusable={false}
                              height="24"
                              onClick={[Function]}
                              viewBox="0 0 24 24"
                              width="24"
                            >
                              <path
                                d="M12 12.707l-4.147 4.146a.498.498 0 0 1-.707 0 .5.5 0 0 1 0-.707L11.293 12 7.146 7.853a.5.5 0 0 1 .707-.707L12 11.293l4.146-4.147a.5.5 0 0 1 .707.707L12.707 12l4.146 4.146a.5.5 0 0 1-.707.707L12 12.707zM12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22.957C5.958 1.043 1.043 5.958 1.043 12c0 6.042 4.915 10.957 10.957 10.957 6.042 0 10.957-4.915 10.957-10.957 0-6.042-4.915-10.957-10.957-10.957z"
                                fillRule="nonzero"
                              />
                            </svg>
                          </StyledComponent>
                        </styled.svg>
                      </Dependent>
                    </Dependent>
                  </div>
                </StyledComponent>
              </styles__CloseButtonWrapper>
              <styles__ModalWrapper>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__ModalWrapper-sc-13jcun6-6",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          "display: flex;",
                          "flex-flow: column;",
                          "justify-content: space-between;",
                          "overflow: scroll;",
                          "height: 100%;",
                          "> div:first-child {",
                          "height: 100%;",
                          "display: flex;",
                          "flex-flow: column;",
                          "justify-content: space-between;",
                          "}",
                        ],
                      },
                      "displayName": "styles__ModalWrapper",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__ModalWrapper-sc-13jcun6-6",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={
                    Object {
                      "current": <div
                        class="c4"
                      >
                        <div
                          class="c5"
                        >
                          <div
                            class="c6"
                          >
                            <div
                              tabindex="-1"
                            >
                              <div
                                class="c7"
                                data-testid="heading"
                              >
                                A heading
                              </div>
                            </div>
                            <p
                              class="c8"
                            >
                              Are you sure?
                            </p>
                          </div>
                          <div
                            class="c9"
                          >
                            <div
                              class="c10"
                            >
                              <div
                                class="c11"
                              >
                                <button
                                  class="c12"
                                  type="button"
                                >
                                  <span
                                    class="c13"
                                  >
                                    I am sure
                                  </span>
                                </button>
                                
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>,
                    }
                  }
                >
                  <div
                    className="c4"
                  >
                    <Box
                      inline={false}
                      inset={5}
                      tag="div"
                    >
                      <styled.div
                        inline={false}
                        inset={5}
                        tag="div"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                [Function],
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": false,
                                "lastClassName": "c10",
                                "rules": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          inline={false}
                          inset={5}
                          tag="div"
                        >
                          <div
                            className="c5"
                          >
                            <Box
                              between={3}
                              inline={false}
                              tag="div"
                            >
                              <styled.div
                                between={3}
                                inline={false}
                                tag="div"
                              >
                                <StyledComponent
                                  between={3}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [
                                        [Function],
                                      ],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-bdVaJa",
                                        "isStatic": false,
                                        "lastClassName": "c10",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                          [Function],
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-bdVaJa",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inline={false}
                                  tag="div"
                                >
                                  <div
                                    className="c6"
                                  >
                                    <div
                                      tabIndex="-1"
                                    >
                                      <Heading
                                        invert={false}
                                        level="h3"
                                        tag="div"
                                      >
                                        <Heading__StyledHeading
                                          as="div"
                                          data-testid="heading"
                                          invert={false}
                                          level="h3"
                                        >
                                          <StyledComponent
                                            as="div"
                                            data-testid="heading"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "Heading__StyledHeading-mpz92r-0",
                                                  "isStatic": false,
                                                  "lastClassName": "c7",
                                                  "rules": Array [
                                                    "word-wrap: break-word;",
                                                    [Function],
                                                  ],
                                                },
                                                "displayName": "Heading__StyledHeading",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "Heading__StyledHeading-mpz92r-0",
                                                "target": "h1",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            invert={false}
                                            level="h3"
                                          >
                                            <div
                                              className="c7"
                                              data-testid="heading"
                                            >
                                              A heading
                                            </div>
                                          </StyledComponent>
                                        </Heading__StyledHeading>
                                      </Heading>
                                    </div>
                                    <Paragraph
                                      align="left"
                                      bold={false}
                                      invert={false}
                                      size="medium"
                                    >
                                      <Paragraph__StyledParagraph
                                        align="left"
                                        bold={false}
                                        invert={false}
                                        size="medium"
                                      >
                                        <StyledComponent
                                          align="left"
                                          bold={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "Paragraph__StyledParagraph-efl81j-0",
                                                "isStatic": false,
                                                "lastClassName": "c8",
                                                "rules": Array [
                                                  [Function],
                                                  "word-wrap: break-word;",
                                                  "padding: 0;",
                                                  "margin: 0;",
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  "sup {",
                                                  "top: -0.5em;",
                                                  "font-size: 0.875rem;",
                                                  "position: relative;",
                                                  "vertical-align: baseline;",
                                                  "padding-left: 0.1em;",
                                                  "}",
                                                ],
                                              },
                                              "displayName": "Paragraph__StyledParagraph",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "Paragraph__StyledParagraph-efl81j-0",
                                              "target": "p",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          invert={false}
                                          size="medium"
                                        >
                                          <p
                                            className="c8"
                                            size="medium"
                                          >
                                            Are you sure?
                                          </p>
                                        </StyledComponent>
                                      </Paragraph__StyledParagraph>
                                    </Paragraph>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </Box>
                            <styles__PaddingOverride>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "styles__PaddingOverride-sc-13jcun6-3",
                                      "isStatic": false,
                                      "lastClassName": "c9",
                                      "rules": Array [
                                        "> div:first-child {",
                                        "padding-bottom: 0rem;",
                                        "}",
                                      ],
                                    },
                                    "displayName": "styles__PaddingOverride",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "styles__PaddingOverride-sc-13jcun6-3",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="c9"
                                >
                                  <Box
                                    inline={false}
                                    tag="div"
                                    vertical={5}
                                  >
                                    <styled.div
                                      inline={false}
                                      tag="div"
                                      vertical={5}
                                    >
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [
                                              [Function],
                                            ],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-bdVaJa",
                                              "isStatic": false,
                                              "lastClassName": "c10",
                                              "rules": Array [
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-bdVaJa",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        inline={false}
                                        tag="div"
                                        vertical={5}
                                      >
                                        <div
                                          className="c10"
                                        >
                                          <styles__CTAWrapper
                                            cancelCTAExists=""
                                          >
                                            <StyledComponent
                                              cancelCTAExists=""
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "styles__CTAWrapper-sc-13jcun6-2",
                                                    "isStatic": false,
                                                    "lastClassName": "c11",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "styles__CTAWrapper",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "styles__CTAWrapper-sc-13jcun6-2",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="c11"
                                              >
                                                <Button
                                                  onClick={[Function]}
                                                  type="button"
                                                  variant="primary"
                                                >
                                                  <Button__StyledButton
                                                    onClick={[Function]}
                                                    type="button"
                                                    variant="primary"
                                                  >
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Button__StyledButton-sa7xo3-0",
                                                            "isStatic": false,
                                                            "lastClassName": "c12",
                                                            "rules": Array [
                                                              "border-width: 0;",
                                                              "border-radius: 4px;",
                                                              "word-wrap: break-word;",
                                                              "font-size: 1rem;",
                                                              "letter-spacing: -0.8px;",
                                                              "line-height: 1.5;",
                                                              "word-wrap: break-word;",
                                                              "font-weight: 700;",
                                                              "height: 3.25rem;",
                                                              "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                                                              "margin: 0;",
                                                              "padding: 0 2rem;",
                                                              "cursor: pointer;",
                                                              "background: none;",
                                                              "transition: background 0.2s;",
                                                              "display: flex;",
                                                              "width: 100%;",
                                                              "align-items: center;",
                                                              "justify-content: center;",
                                                              "@media (min-width: 768px) {",
                                                              "display: inline-flex;",
                                                              "width: auto;",
                                                              "min-width: 180px;",
                                                              "}",
                                                              [Function],
                                                            ],
                                                          },
                                                          "displayName": "Button__StyledButton",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Button__StyledButton-sa7xo3-0",
                                                          "target": "button",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={
                                                        Object {
                                                          "current": <button
                                                            class="c12"
                                                            type="button"
                                                          >
                                                            <span
                                                              class="c13"
                                                            >
                                                              I am sure
                                                            </span>
                                                          </button>,
                                                        }
                                                      }
                                                      onClick={[Function]}
                                                      type="button"
                                                      variant="primary"
                                                    >
                                                      <button
                                                        className="c12"
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        <Button__ButtonTextWrapper>
                                                          <StyledComponent
                                                            forwardedComponent={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "attrs": Array [],
                                                                "componentStyle": ComponentStyle {
                                                                  "componentId": "Button__ButtonTextWrapper-sa7xo3-1",
                                                                  "isStatic": false,
                                                                  "lastClassName": "c13",
                                                                  "rules": Array [
                                                                    "width: 100%;",
                                                                  ],
                                                                },
                                                                "displayName": "Button__ButtonTextWrapper",
                                                                "foldedComponentIds": Array [],
                                                                "render": [Function],
                                                                "styledComponentId": "Button__ButtonTextWrapper-sa7xo3-1",
                                                                "target": "span",
                                                                "toString": [Function],
                                                                "warnTooManyClasses": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            forwardedRef={null}
                                                          >
                                                            <span
                                                              className="c13"
                                                            >
                                                              I am sure
                                                            </span>
                                                          </StyledComponent>
                                                        </Button__ButtonTextWrapper>
                                                      </button>
                                                    </StyledComponent>
                                                  </Button__StyledButton>
                                                </Button>
                                              </div>
                                            </StyledComponent>
                                          </styles__CTAWrapper>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Box>
                                </div>
                              </StyledComponent>
                            </styles__PaddingOverride>
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Box>
                  </div>
                </StyledComponent>
              </styles__ModalWrapper>
            </div>
          </StyledComponent>
        </styles__StyledModal>
      </div>
    </StyledComponent>
  </styles__FullScreenOverlay>
</Modal>
`;
