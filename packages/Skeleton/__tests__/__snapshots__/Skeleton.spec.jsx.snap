// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Skeleton renders 1`] = `
<Skeleton__StyledSkeleton
  aria-busy="true"
  characters={0}
  isFixedCharacterWidth={false}
  safeSize={18}
/>
`;

exports[`Skeleton should set correct class based on size attribute, for all sizes 1`] = `
.c0 {
  height: 18px;
  min-width: 18px;
  border-radius: 9px;
  width: 100%;
  max-width: 100%;
  display: inline-block;
  overflow: hidden;
  background-color: #d8d8d8;
  background-repeat: no-repeat;
  background-position: 0 0;
  background-size: 200% 100%;
  background-image: linear-gradient( to right,#d8d8d8,#f7f7f8,#d8d8d8 );
  -webkit-animation-name: gaOlHX;
  animation-name: gaOlHX;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-delay: 2s;
  animation-delay: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

<Skeleton
  characters={0}
  size="xs"
>
  <Skeleton__StyledSkeleton
    aria-busy="true"
    characters={0}
    isFixedCharacterWidth={false}
    safeSize={18}
  >
    <StyledComponent
      aria-busy="true"
      characters={0}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
              " width:",
              [Function],
              ";max-width:100%;display:inline-block;overflow:hidden;background-color:",
              "#d8d8d8",
              ";background-repeat:no-repeat;background-position:0 0;background-size:200% 100%;background-image:linear-gradient( to right,",
              "#d8d8d8",
              ",",
              "#f7f7f8",
              ",",
              "#d8d8d8",
              " );animation-name:",
              Keyframes {
                "id": "sc-keyframes-gaOlHX",
                "inject": [Function],
                "name": "gaOlHX",
                "rules": Array [
                  "@-webkit-keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                  "@keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                ],
                "toString": [Function],
              },
              ";animation-duration:2s;animation-delay:2s;animation-iteration-count:infinite;",
            ],
          },
          "displayName": "Skeleton__StyledSkeleton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isFixedCharacterWidth={false}
      safeSize={18}
    >
      <span
        aria-busy="true"
        className="c0"
      />
    </StyledComponent>
  </Skeleton__StyledSkeleton>
</Skeleton>
`;

exports[`Skeleton should set correct class based on size attribute, for all sizes 2`] = `
.c0 {
  height: 24px;
  min-width: 24px;
  border-radius: 12px;
  width: 100%;
  max-width: 100%;
  display: inline-block;
  overflow: hidden;
  background-color: #d8d8d8;
  background-repeat: no-repeat;
  background-position: 0 0;
  background-size: 200% 100%;
  background-image: linear-gradient( to right,#d8d8d8,#f7f7f8,#d8d8d8 );
  -webkit-animation-name: gaOlHX;
  animation-name: gaOlHX;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-delay: 2s;
  animation-delay: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

<Skeleton
  characters={0}
  size="sm"
>
  <Skeleton__StyledSkeleton
    aria-busy="true"
    characters={0}
    isFixedCharacterWidth={false}
    safeSize={24}
  >
    <StyledComponent
      aria-busy="true"
      characters={0}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
              " width:",
              [Function],
              ";max-width:100%;display:inline-block;overflow:hidden;background-color:",
              "#d8d8d8",
              ";background-repeat:no-repeat;background-position:0 0;background-size:200% 100%;background-image:linear-gradient( to right,",
              "#d8d8d8",
              ",",
              "#f7f7f8",
              ",",
              "#d8d8d8",
              " );animation-name:",
              Keyframes {
                "id": "sc-keyframes-gaOlHX",
                "inject": [Function],
                "name": "gaOlHX",
                "rules": Array [
                  "@-webkit-keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                  "@keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                ],
                "toString": [Function],
              },
              ";animation-duration:2s;animation-delay:2s;animation-iteration-count:infinite;",
            ],
          },
          "displayName": "Skeleton__StyledSkeleton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isFixedCharacterWidth={false}
      safeSize={24}
    >
      <span
        aria-busy="true"
        className="c0"
      />
    </StyledComponent>
  </Skeleton__StyledSkeleton>
</Skeleton>
`;

exports[`Skeleton should set correct class based on size attribute, for all sizes 3`] = `
.c0 {
  height: 36px;
  min-width: 36px;
  border-radius: 18px;
  width: 100%;
  max-width: 100%;
  display: inline-block;
  overflow: hidden;
  background-color: #d8d8d8;
  background-repeat: no-repeat;
  background-position: 0 0;
  background-size: 200% 100%;
  background-image: linear-gradient( to right,#d8d8d8,#f7f7f8,#d8d8d8 );
  -webkit-animation-name: gaOlHX;
  animation-name: gaOlHX;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-delay: 2s;
  animation-delay: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

<Skeleton
  characters={0}
  size="md"
>
  <Skeleton__StyledSkeleton
    aria-busy="true"
    characters={0}
    isFixedCharacterWidth={false}
    safeSize={36}
  >
    <StyledComponent
      aria-busy="true"
      characters={0}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
              " width:",
              [Function],
              ";max-width:100%;display:inline-block;overflow:hidden;background-color:",
              "#d8d8d8",
              ";background-repeat:no-repeat;background-position:0 0;background-size:200% 100%;background-image:linear-gradient( to right,",
              "#d8d8d8",
              ",",
              "#f7f7f8",
              ",",
              "#d8d8d8",
              " );animation-name:",
              Keyframes {
                "id": "sc-keyframes-gaOlHX",
                "inject": [Function],
                "name": "gaOlHX",
                "rules": Array [
                  "@-webkit-keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                  "@keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                ],
                "toString": [Function],
              },
              ";animation-duration:2s;animation-delay:2s;animation-iteration-count:infinite;",
            ],
          },
          "displayName": "Skeleton__StyledSkeleton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isFixedCharacterWidth={false}
      safeSize={36}
    >
      <span
        aria-busy="true"
        className="c0"
      />
    </StyledComponent>
  </Skeleton__StyledSkeleton>
</Skeleton>
`;

exports[`Skeleton should set correct class based on size attribute, for all sizes 4`] = `
.c0 {
  height: 48px;
  min-width: 48px;
  border-radius: 24px;
  width: 100%;
  max-width: 100%;
  display: inline-block;
  overflow: hidden;
  background-color: #d8d8d8;
  background-repeat: no-repeat;
  background-position: 0 0;
  background-size: 200% 100%;
  background-image: linear-gradient( to right,#d8d8d8,#f7f7f8,#d8d8d8 );
  -webkit-animation-name: gaOlHX;
  animation-name: gaOlHX;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-delay: 2s;
  animation-delay: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

<Skeleton
  characters={0}
  size="lg"
>
  <Skeleton__StyledSkeleton
    aria-busy="true"
    characters={0}
    isFixedCharacterWidth={false}
    safeSize={48}
  >
    <StyledComponent
      aria-busy="true"
      characters={0}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
              " width:",
              [Function],
              ";max-width:100%;display:inline-block;overflow:hidden;background-color:",
              "#d8d8d8",
              ";background-repeat:no-repeat;background-position:0 0;background-size:200% 100%;background-image:linear-gradient( to right,",
              "#d8d8d8",
              ",",
              "#f7f7f8",
              ",",
              "#d8d8d8",
              " );animation-name:",
              Keyframes {
                "id": "sc-keyframes-gaOlHX",
                "inject": [Function],
                "name": "gaOlHX",
                "rules": Array [
                  "@-webkit-keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                  "@keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                ],
                "toString": [Function],
              },
              ";animation-duration:2s;animation-delay:2s;animation-iteration-count:infinite;",
            ],
          },
          "displayName": "Skeleton__StyledSkeleton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isFixedCharacterWidth={false}
      safeSize={48}
    >
      <span
        aria-busy="true"
        className="c0"
      />
    </StyledComponent>
  </Skeleton__StyledSkeleton>
</Skeleton>
`;

exports[`Skeleton should set correct class based on size attribute, for all sizes 5`] = `
.c0 {
  height: 64px;
  min-width: 64px;
  border-radius: 32px;
  width: 100%;
  max-width: 100%;
  display: inline-block;
  overflow: hidden;
  background-color: #d8d8d8;
  background-repeat: no-repeat;
  background-position: 0 0;
  background-size: 200% 100%;
  background-image: linear-gradient( to right,#d8d8d8,#f7f7f8,#d8d8d8 );
  -webkit-animation-name: gaOlHX;
  animation-name: gaOlHX;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-delay: 2s;
  animation-delay: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
}

<Skeleton
  characters={0}
  size="xl"
>
  <Skeleton__StyledSkeleton
    aria-busy="true"
    characters={0}
    isFixedCharacterWidth={false}
    safeSize={64}
  >
    <StyledComponent
      aria-busy="true"
      characters={0}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
              " width:",
              [Function],
              ";max-width:100%;display:inline-block;overflow:hidden;background-color:",
              "#d8d8d8",
              ";background-repeat:no-repeat;background-position:0 0;background-size:200% 100%;background-image:linear-gradient( to right,",
              "#d8d8d8",
              ",",
              "#f7f7f8",
              ",",
              "#d8d8d8",
              " );animation-name:",
              Keyframes {
                "id": "sc-keyframes-gaOlHX",
                "inject": [Function],
                "name": "gaOlHX",
                "rules": Array [
                  "@-webkit-keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                  "@keyframes gaOlHX{0%{background-position:200% 0;}100%{background-position:-100% 0;}}",
                ],
                "toString": [Function],
              },
              ";animation-duration:2s;animation-delay:2s;animation-iteration-count:infinite;",
            ],
          },
          "displayName": "Skeleton__StyledSkeleton",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "Skeleton__StyledSkeleton-sc-4tyjdz-0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isFixedCharacterWidth={false}
      safeSize={64}
    >
      <span
        aria-busy="true"
        className="c0"
      />
    </StyledComponent>
  </Skeleton__StyledSkeleton>
</Skeleton>
`;
