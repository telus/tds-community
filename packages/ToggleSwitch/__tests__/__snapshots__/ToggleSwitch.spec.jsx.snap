// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleSwitch renders 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c2 {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: none;
  box-shadow: none;
  position: relative;
  border: none;
  padding: 0;
  width: 2.5rem;
  height: 1.5rem;
  border-radius: 1.5rem;
  background-color: #d8d8d8;
}

.c2:focus {
  outline-style: solid;
  outline-color: rgb(59,153,252);
  outline-width: 0.3125rem;
}

.c2:focus::-moz-focus-inner {
  border: 0;
}

.c3 {
  position: absolute;
  width: 1.125rem;
  height: 1.125rem;
  top: 0.1875rem;
  left: 0.1875rem;
  border-radius: 1.125rem;
  background-color: white;
  -webkit-transition: left 0.25s;
  transition: left 0.25s;
  box-shadow: 0 0 2px 0 #000;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

@media (prefers-reduced-motion:reduce) {
  .c3 {
    -webkit-transition: none !important;
    transition: none !important;
  }
}

<ToggleSwitch
  checked={false}
  id="my-id-123"
  isLoading={false}
  label="label"
  name="name"
  onClick={[MockFunction]}
  toolTipCopy="en"
  value="value"
>
  <StyledLabel
    htmlFor="my-id-123"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__StyledLabel-i9h5g3-0",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "display: flex; justify-content: space-between;",
            ],
          },
          "displayName": "StyledLabel",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__StyledLabel-i9h5g3-0",
          "target": "label",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      htmlFor="my-id-123"
    >
      <label
        className="c0"
        htmlFor="my-id-123"
      >
        <Box
          between={2}
          inline={true}
          tag="div"
        >
          <div
            className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz"
          >
            <Text
              block={false}
              bold={false}
              id="my-id-123-label"
              invert={false}
              size="medium"
            >
              <span
                className="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__mediumFont___XMrRj TDS_Typography-modules__color___2CNH8"
                id="my-id-123-label"
              >
                label
              </span>
            </Text>
          </div>
        </Box>
        <styles__InputSwitchWrapper>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__InputSwitchWrapper-i9h5g3-3",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "display: flex; justify-content: center;",
                  ],
                },
                "displayName": "styles__InputSwitchWrapper",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__InputSwitchWrapper-i9h5g3-3",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <Spinner
                a11yLabel="A spinner is active. Please wait while the page completes a task."
                dangerouslyHideVisibleLabel={false}
                fullScreen={false}
                inline={true}
                size="small"
                spinning={false}
                tag="span"
                variant="primary"
              >
                <styles__Button
                  aria-checked={false}
                  aria-labelledby="my-id-123-label"
                  data-testid="my-id-123-switch"
                  id="my-id-123"
                  name="name"
                  onClick={[Function]}
                  role="switch"
                  toolTipCopy="en"
                  value="value"
                >
                  <StyledComponent
                    aria-checked={false}
                    aria-labelledby="my-id-123-label"
                    data-testid="my-id-123-switch"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__Button-i9h5g3-1",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "styles__Button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__Button-i9h5g3-1",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={
                      Object {
                        "current": .c0 {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: none;
  box-shadow: none;
  position: relative;
  border: none;
  padding: 0;
  width: 2.5rem;
  height: 1.5rem;
  border-radius: 1.5rem;
  background-color: #d8d8d8;
}

.c0:focus {
  outline-style: solid;
  outline-color: rgb(59,153,252);
  outline-width: 0.3125rem;
}

.c0:focus::-moz-focus-inner {
  border: 0;
}

.c1 {
  position: absolute;
  width: 1.125rem;
  height: 1.125rem;
  top: 0.1875rem;
  left: 0.1875rem;
  border-radius: 1.125rem;
  background-color: white;
  -webkit-transition: left 0.25s;
  transition: left 0.25s;
  box-shadow: 0 0 2px 0 #000;
}

@media (prefers-reduced-motion:reduce) {
  .c1 {
    -webkit-transition: none !important;
    transition: none !important;
  }
}

<button
                          aria-checked="false"
                          aria-labelledby="my-id-123-label"
                          class="c0"
                          data-testid="my-id-123-switch"
                          id="my-id-123"
                          name="name"
                          role="switch"
                          value="value"
                        >
                          <span
                            class="c1"
                          />
                        </button>,
                      }
                    }
                    id="my-id-123"
                    name="name"
                    onClick={[Function]}
                    role="switch"
                    toolTipCopy="en"
                    value="value"
                  >
                    <button
                      aria-checked={false}
                      aria-labelledby="my-id-123-label"
                      className="c2"
                      data-testid="my-id-123-switch"
                      id="my-id-123"
                      name="name"
                      onClick={[Function]}
                      role="switch"
                      value="value"
                    >
                      <styles__Slider
                        pressed={false}
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__Slider-i9h5g3-2",
                                "isStatic": false,
                                "lastClassName": "c3",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "styles__Slider",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styles__Slider-i9h5g3-2",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          pressed={false}
                        >
                          <span
                            className="c3"
                          />
                        </StyledComponent>
                      </styles__Slider>
                    </button>
                  </StyledComponent>
                </styles__Button>
              </Spinner>
            </div>
          </StyledComponent>
        </styles__InputSwitchWrapper>
      </label>
    </StyledComponent>
  </StyledLabel>
</ToggleSwitch>
`;
